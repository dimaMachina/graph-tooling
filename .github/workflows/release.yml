name: Release
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request:

permissions: write-all

env:
  RELEASE_COMMIT_MSG: 'chore(release): update monorepo packages versions'
  DEBUG: napi:*
  APP_NAME: graph-matchstick
  MACOSX_DEPLOYMENT_TARGET: '10.13'
jobs:
  # Matchstick
  build-matchstick-bindings:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
          - host: windows-latest
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: pnpm build --target x86_64-unknown-linux-gnu
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: packages/matchstick
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: pnpm
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if:
          ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target ==
          'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        working-directory: packages/matchstick
        run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: pnpm
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options:
            '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v
            ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{
            github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{
            github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish-napi-bindings:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install dependencies
        working-directory: packages/matchstick
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        working-directory: packages/matchstick
        run: pnpm artifacts
      - name: List packages
        working-directory: packages/matchstick
        run: ls -R ./npm
        shell: bash
      - name: Publish
        working-directory: packages/matchstick
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # CLI
  # stable:
  #   name: Stable
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup environment
  #       uses: the-guild-org/shared-config/setup@main
  #       with:
  #         nodeVersion: 20
  #         packageManager: pnpm
  #         packageManagerVersion: 9.1.0

  #     - name: Set variables
  #       id: vars
  #       run: |
  #         echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  #         echo "date=$(date +"%B %d, %Y")" >> $GITHUB_OUTPUT
  #     - name: Build
  #       if: ${{ startsWith(github.event.head_commit.message, env.RELEASE_COMMIT_MSG) }}
  #       run: pnpm --filter=@graphprotocol/graph-cli build
  #     - name: Pack binaries
  #       if: ${{ startsWith(github.event.head_commit.message, env.RELEASE_COMMIT_MSG) }}
  #       run: pnpm --filter=@graphprotocol/graph-cli oclif:pack
  #     - name: Release / pull_request
  #       uses: dotansimha/changesets-action@v1.5.0
  #       with:
  #         publish: pnpm release
  #         version: pnpm changeset version
  #         commit: ${{ env.RELEASE_COMMIT_MSG }}
  #         title: Upcoming Release Changes
  #         createGithubReleases: true
  #         githubReleaseName: ${{ steps.vars.outputs.date }}
  #         githubReleaseAssets: packages/cli/dist/*.tar.gz
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
