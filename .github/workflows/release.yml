name: Release
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request:

permissions: write-all

env:
  RELEASE_COMMIT_MSG: 'chore(release): update monorepo packages versions'
  DEBUG: napi:*
  APP_NAME: graph-matchstick
  MACOSX_DEPLOYMENT_TARGET: '10.13'
jobs:
  # Matchstick
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build
              strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              pnpm build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: macos-latest-xlarge
            target: aarch64-apple-darwin
            build: |
              pnpm build --target aarch64-apple-darwin
              strip -x *.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: packages/matchstick
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.6

      - name: Install dependencies
        run: pnpm install

      - name: Install Protobuf
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install protobuf
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          fi

      - name: Install OpenSSL on Ubuntu
        if: matrix.settings.host == 'ubuntu-latest'
        run: sudo apt-get install -y libssl-dev

      - name: Install OpenSSL on macOS
        if: matrix.settings.host == 'macos-latest'
        run: brew install openssl

      - name: Install OpenSSL on Windows
        if: matrix.settings.host == 'windows-latest'
        run: choco install openssl

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options:
            '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v
            ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{
            github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{
            github.workspace }}:/build -w /build/packages/matchstick'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: packages/matchstick/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: publish to npm
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: install dependencies (lib)
        run: pnpm install
        working-directory: packages/matchstick

      - name: install dependencies (bin)
        run: pnpm install
        working-directory: bin/npm

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: packages/matchstick/artifacts

      - name: Move artifacts
        run: pnpm artifacts
        working-directory: packages/matchstick

      - name: List packages
        run: ls -R ./npm
        shell: bash
        working-directory: packages/matchstick

      - name: Update version to match release tag and commit
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          cd packages/matchstick
          npm version $TAG_NAME --no-git-tag-version
          cd ../../
          cd bin/npm
          npm version $TAG_NAME --no-git-tag-version
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "ci: bump napi packages' versions to $TAG_NAME"
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: publish lib
        working-directory: packages/matchstick
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # CLI
  # stable:
  #   name: Stable
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup environment
  #       uses: the-guild-org/shared-config/setup@main
  #       with:
  #         nodeVersion: 20
  #         packageManager: pnpm
  #         packageManagerVersion: 9.1.0

  #     - name: Set variables
  #       id: vars
  #       run: |
  #         echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  #         echo "date=$(date +"%B %d, %Y")" >> $GITHUB_OUTPUT
  #     - name: Build
  #       if: ${{ startsWith(github.event.head_commit.message, env.RELEASE_COMMIT_MSG) }}
  #       run: pnpm --filter=@graphprotocol/graph-cli build
  #     - name: Pack binaries
  #       if: ${{ startsWith(github.event.head_commit.message, env.RELEASE_COMMIT_MSG) }}
  #       run: pnpm --filter=@graphprotocol/graph-cli oclif:pack
  #     - name: Release / pull_request
  #       uses: dotansimha/changesets-action@v1.5.0
  #       with:
  #         publish: pnpm release
  #         version: pnpm changeset version
  #         commit: ${{ env.RELEASE_COMMIT_MSG }}
  #         title: Upcoming Release Changes
  #         createGithubReleases: true
  #         githubReleaseName: ${{ steps.vars.outputs.date }}
  #         githubReleaseAssets: packages/cli/dist/*.tar.gz
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
